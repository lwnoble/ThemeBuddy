(()=>{"use strict";({409:function(){var e=this&&this.__awaiter||function(e,o,a,n){return new(a||(a=Promise))((function(t,r){function i(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var o;e.done?t(e.value):(o=e.value,o instanceof a?o:new a((function(e){e(o)}))).then(i,s)}l((n=n.apply(e,o||[])).next())}))};console.log("PLUGIN STARTED");try{function o(e){console.log(`Updating all page backgrounds to Surface-Dim color: ${e}`);const o=parseInt(e.slice(1,3),16)/255,a=parseInt(e.slice(3,5),16)/255,n=parseInt(e.slice(5,7),16)/255;for(const e of figma.root.children)e.backgrounds=[{type:"SOLID",color:{r:o,g:a,b:n}}]}function a(o,a,n){return e(this,void 0,void 0,(function*(){if(console.log(`Loading font: ${n}`),"poiret one"===n.toLowerCase()){console.log("Detected special case font: Poiret One");try{return yield figma.loadFontAsync({family:"Poiret One",style:"Regular"}),console.log("Successfully loaded Poiret One"),o.setValueForMode(a,"Poiret One"),!0}catch(e){console.error("Error loading Poiret One:",e)}}try{const e=yield figma.listAvailableFontsAsync();console.log(`Found ${e.length} available fonts`),console.log(`Sample fonts: ${e.slice(0,5).map((e=>e.fontName.family)).join(", ")}`);const t=e.filter((e=>{const o=e.fontName.family.toLowerCase()===n.toLowerCase()||e.fontName.family.toLowerCase().includes(n.toLowerCase())||n.toLowerCase().includes(e.fontName.family.toLowerCase());return o&&console.log(`Found matching font: ${e.fontName.family}, style: ${e.fontName.style}`),o}));if(console.log(`Found ${t.length} variants for font family: ${n}`),t.length>0){let e=t.find((e=>"Regular"===e.fontName.style));return e||(e=t.find((e=>"Medium"===e.fontName.style))),e||(e=t[0]),console.log(`Selected font variant: ${e.fontName.family}, style: ${e.fontName.style}`),yield figma.loadFontAsync(e.fontName),o.setValueForMode(a,e.fontName.family),console.log(`Successfully set font family: ${e.fontName.family}`),!0}}catch(e){throw console.error(`Error loading font ${n}:`,e),e}}))}function n(o){return e(this,void 0,void 0,(function*(){try{const e=figma.variables.getLocalVariableCollections().find((e=>"Sizing"===e.name));if(!e)return void console.error("Sizing collection not found");let a;const n=e.modes.find((e=>"Default"===e.name));n?a=n.modeId:e.modes.length>0?(console.warn("'Default' mode not found in Sizing, using first available mode"),a=e.modes[0].modeId):(console.warn("No modes found in Sizing, creating 'Default' mode"),a=e.addMode("Default"));for(const n of o)try{const o=figma.variables.getLocalVariables().find((o=>o.name===n.targetVariable&&o.variableCollectionId===e.id));if(!o){console.error(`${n.targetVariable} variable not found in Sizing collection`);continue}const t=`${n.group}/${n.variable}`;let r=figma.variables.getLocalVariables().find((o=>o.name===t&&o.variableCollectionId===e.id));r||(console.log(`Creating new variable: ${t}`),r=figma.variables.createVariable(t,e.id,o.resolvedType)),console.log(`Setting ${t} to reference ${o.name} (ID: ${o.id})`),r.setValueForMode(a,{type:"VARIABLE_ALIAS",id:o.id}),console.log(`Successfully updated ${t}`)}catch(e){console.error(`Error updating variable ${n.variable}:`,e)}console.log("Button shape update complete")}catch(e){console.error("Error updating button shape:",e)}}))}function t(e){console.log(`Updating all page backgrounds to color: ${e}`);const o=parseInt(e.slice(1,3),16)/255,a=parseInt(e.slice(3,5),16)/255,n=parseInt(e.slice(5,7),16)/255;for(const e of figma.root.children)e.backgrounds=[{type:"SOLID",color:{r:o,g:a,b:n}}]}function r(e){let o=figma.variables.getLocalVariableCollections().find((o=>o.name===e));return o?console.log(`"${e}" collection already exists`):(o=figma.variables.createVariableCollection(e),console.log(`Created "${e}" collection`)),o}function i(e,o,a){let n=figma.variables.getLocalVariables().find((a=>a.name===e&&a.variableCollectionId===o));return n?console.log(`"${e}" variable already exists`):(n=figma.variables.createVariable(e,o,a),console.log(`Created "${e}" variable`)),n}function s(o,a,n,t,r,i){return e(this,void 0,void 0,(function*(){var e;console.log(`Updating navigation bar links for ${o} to target ${r}`);try{const s=figma.variables.getLocalVariableCollections(),l=s.find((e=>e.name===a)),c=s.find((e=>e.name===t));if(!l||!c)return void console.error(`Collection not found: NavBar=${!!l}, Modes=${!!c}`);const d=figma.variables.getLocalVariables(),u=d.filter((e=>e.variableCollectionId===l.id&&e.name.includes(o)));if(0===u.length)return void console.warn(`No navbar variables found for ${o}`);const f=null===(e=l.modes.find((e=>e.name===n)))||void 0===e?void 0:e.modeId;if(!f)return void console.error(`Mode "${n}" not found in ${a} collection`);const g=d.filter((e=>e.variableCollectionId===c.id&&e.name.includes(r)));if(0===g.length)return void console.error(`No target variables found for group ${r}`);let m=c.defaultModeId;if(i){const e=c.modes.find((e=>e.name===i));e?m=e.modeId:console.warn(`Active mode "${i}" not found in target collection, using default mode`)}for(const e of u){const a=e.name.match(new RegExp(`${o}-([^-]+)(-(.+))?$`));if(a){const o=a[1],n=a[3]||"";let t;n&&(t=g.find((e=>e.name.includes(`${o}-${n}`)||e.name.endsWith(`/${o}-${n}`)))),t||(t=g.find((e=>e.name.includes(`/${o}`)||e.name.endsWith(`/${o}`)))),t||(t=g.find((e=>e.name.toLowerCase().includes(o.toLowerCase())))),t?(e.setValueForMode(f,{type:"VARIABLE_ALIAS",id:t.id}),console.log(`✅ Linked ${e.name} to ${t.name}`)):console.warn(`❌ Could not find a matching target variable for ${e.name}`)}else console.warn(`❓ Could not parse component type from ${e.name}`)}figma.ui.postMessage({type:"navbar-links-updated",navId:o,targetGroup:r,success:!0})}catch(e){console.error("Error updating navigation bar links:",e),figma.ui.postMessage({type:"navbar-links-updated",navId:o,targetGroup:r,success:!1,error:e instanceof Error?e.message:String(e)})}}))}function l(o,a,n){return e(this,void 0,void 0,(function*(){var e,t;const r=figma.variables.getLocalVariableCollections().find((e=>e.name===o));if(!r)return void figma.notify(`Collection ${o} not found`);const i=null===(e=r.modes.find((e=>e.name===a)))||void 0===e?void 0:e.modeId,s=null===(t=r.modes.find((e=>e.name===n)))||void 0===t?void 0:t.modeId;i&&s?r.variableIds.forEach((e=>{const o=figma.variables.getVariableById(e);if(o){const e=o.valuesByMode[i];void 0!==e&&o.setValueForMode(s,e)}})):figma.notify(`Mode not found: ${a} or ${n}`)}))}function c(o,a,n,t,r,i){return e(this,void 0,void 0,(function*(){var e;console.log(`Updating status bar links for ${o} to target ${r}`);try{const s=figma.variables.getLocalVariableCollections(),l=s.find((e=>e.name===a)),c=s.find((e=>e.name===t));if(!l||!c)return void console.error(`Collection not found: StatusBar=${!!l}, Modes=${!!c}`);const d=figma.variables.getLocalVariables(),u=d.filter((e=>e.variableCollectionId===l.id&&e.name.includes(o)));if(0===u.length)return void console.warn(`No statusbar variables found for ${o}`);const f=null===(e=l.modes.find((e=>e.name===n)))||void 0===e?void 0:e.modeId;if(!f)return void console.error(`Mode "${n}" not found in ${a} collection`);const g=d.filter((e=>e.variableCollectionId===c.id&&e.name.includes(r)));if(0===g.length)return void console.error(`No target variables found for group ${r}`);let m=c.defaultModeId;if(i){const e=c.modes.find((e=>e.name===i));e?m=e.modeId:console.warn(`Active mode "${i}" not found in target collection, using default mode`)}for(const e of u){const a=e.name.match(new RegExp(`${o}-([^-]+)(-(.+))?$`));if(a){const o=a[1],n=a[3]||"";let t;n&&(t=g.find((e=>e.name.includes(`${o}-${n}`)||e.name.endsWith(`/${o}-${n}`)))),t||(t=g.find((e=>e.name.includes(`/${o}`)||e.name.endsWith(`/${o}`)))),t||(t=g.find((e=>e.name.toLowerCase().includes(o.toLowerCase())))),t?(e.setValueForMode(f,{type:"VARIABLE_ALIAS",id:t.id}),console.log(`✅ Linked ${e.name} to ${t.name}`)):console.warn(`❌ Could not find a matching target variable for ${e.name}`)}else console.warn(`❓ Could not parse component type from ${e.name}`)}figma.ui.postMessage({type:"statusbar-links-updated",statusId:o,targetGroup:r,success:!0})}catch(e){console.error("Error updating status bar links:",e),figma.ui.postMessage({type:"statusbar-links-updated",statusId:o,targetGroup:r,success:!1,error:e instanceof Error?e.message:String(e)})}}))}console.log("🔍 Figma Plugin Code Loading"),figma.showUI(__html__,{width:460,height:700}),console.log("🔍 Figma Plugin UI Shown"),figma.ui.onmessage=d=>{var u,f,g;if(console.log("🔍 Message received in plugin:",d),"update-page-backgrounds-to-surface-dim"===d.type&&o(d.color),"copy-shadow-variables"===d.type){const{collection:e,sourceMode:o,targetMode:a}=d;figma.variables.getLocalVariableCollectionsAsync().then((n=>{var t,r;const i=n.find((o=>o.name===e));if(!i)return console.error(`Collection "${e}" not found`),Promise.reject(`Collection "${e}" not found`);const s=null===(t=i.modes.find((e=>e.name===o)))||void 0===t?void 0:t.modeId,l=null===(r=i.modes.find((e=>e.name===a)))||void 0===r?void 0:r.modeId;return s&&l?figma.variables.getLocalVariablesAsync().then((n=>{const t=n.filter((e=>e.variableCollectionId===i.id)),r=t.map((e=>{const o=e.valuesByMode[s];return void 0!==o?e.setValueForMode(l,o):Promise.resolve()}));return Promise.all(r).then((()=>{console.log(`Copied ${t.length} variables from "${o}" to "${a}" in "${e}"`)}))})):(console.error(`Mode "${s?a:o}" not found in collection "${e}"`),Promise.reject(`Mode not found in collection "${e}"`))})).catch((e=>{console.error("Error copying shadow variables:",e)}))}switch(d.type){case"update-page-backgrounds":t(d.color);break;case"update-variable":try{const{collection:e,variable:o,value:a,mode:n="Default"}=d;console.log(`Updating variable: ${e}/${o} to ${a} in mode ${n}`);const t=figma.variables.getLocalVariableCollections().find((o=>o.name===e));if(!t)return console.error(`Collection not found: ${e}`),void figma.notify(`Error: Collection "${e}" not found`,{error:!0});const r=null===(u=t.modes.find((e=>e.name===n)))||void 0===u?void 0:u.modeId;if(!r)return console.error(`Mode not found: ${n} in collection ${e}`),void figma.notify(`Error: Mode "${n}" not found in collection "${e}"`,{error:!0});const i=figma.variables.getLocalVariables().find((e=>e.name===o&&e.variableCollectionId===t.id));if(!i)return console.error(`Variable not found: ${o} in collection ${e}`),void figma.notify(`Error: Variable "${o}" not found in collection "${e}"`,{error:!0});i.setValueForMode(r,a),console.log(`Successfully updated ${e}/${o} to ${a} in mode ${n}`),figma.notify(`Updated ${o} to ${a}`),figma.ui.postMessage({type:"variable-updated",collection:e,variable:o,value:a,success:!0})}catch(e){console.error("Error updating variable:",e),figma.notify(`Error updating variable: ${e instanceof Error?e.message:String(e)}`,{error:!0}),figma.ui.postMessage({type:"variable-updated",collection:d.collection,variable:d.variable,success:!1,error:e instanceof Error?e.message:String(e)})}break;case"save-custom-pairs":try{const e=d.pairs;console.log("Saving custom font pairs:",e),figma.clientStorage.setAsync("customFontPairs",e).then((()=>{console.log("Custom font pairs saved successfully"),figma.ui.postMessage({type:"custom-pairs-saved",success:!0})})).catch((e=>{console.error("Error saving custom font pairs:",e),figma.ui.postMessage({type:"custom-pairs-saved",success:!1,error:e instanceof Error?e.message:String(e)})}))}catch(e){console.error("Error processing save-custom-pairs:",e)}break;case"load-custom-pairs":try{console.log("Loading custom font pairs"),figma.clientStorage.getAsync("customFontPairs").then((e=>{e?(console.log("Loaded custom font pairs:",e),figma.ui.postMessage({type:"custom-pairs-loaded",pairs:e})):(console.log("No custom font pairs found"),figma.ui.postMessage({type:"custom-pairs-loaded",pairs:[]}))})).catch((e=>{console.error("Error loading custom font pairs:",e),figma.ui.postMessage({type:"custom-pairs-loaded",pairs:[],error:e instanceof Error?e.message:String(e)})}))}catch(e){console.error("Error processing load-custom-pairs:",e),figma.ui.postMessage({type:"custom-pairs-loaded",pairs:[]})}break;case"update-design-token":e(void 0,void 0,void 0,(function*(){var e;try{const{collection:o,group:n,mode:t,variable:s,value:l}=d;console.log(`Updating ${o}/${n}/${s} in mode ${t} with value:`,l);const c=r(o);let u=null===(e=c.modes.find((e=>e.name===t)))||void 0===e?void 0:e.modeId;u||(u=c.addMode(t),console.log(`Created mode "${t}"`));let f="STRING";"string"==typeof l&&l.startsWith("#")?f="COLOR":"number"==typeof l&&(f="FLOAT");const g=n?`${n}/${s}`:s,m=i(g,c.id,f);if("Font-Families"===n&&"string"==typeof l)try{const e={"poiret one":"Poiret One","dancing script":"Dancing Script","nunito sans":"Nunito Sans","work sans":"Work Sans","pt sans":"PT Sans","pt serif":"PT Serif","dm sans":"DM Sans","source sans pro":"Source Sans Pro","source serif pro":"Source Serif Pro"},o=l.toLowerCase();let n=l;e[o]?(n=e[o],console.log(`Using special case handling for ${l}: ${n}`)):n=l.replace(/\s*(Display|Medium|Bold|Light|Black|Thin|Regular|Italic|ExtraBold|SemiBold|ExtraLight|Condensed|Extended|Narrow|Sans Serif|Serif)\s*/gi,"").replace(/\s*,.*$/,"").trim(),console.log(`Processing font: "${l}" -> cleaned to: "${n}"`),yield a(m,u,n),console.log(`Successfully set font ${g} to ${n}`),figma.ui.postMessage({type:"design-token-updated",variable:s,value:n,success:!0})}catch(e){console.error("Font loading error:",e),figma.ui.postMessage({type:"design-token-updated",variable:s,success:!1,error:e instanceof Error?e.toString():"Font loading error"})}else{let e=l;if("COLOR"===f&&"string"==typeof l)if(9===l.length){const o=parseInt(l.substr(1,2),16)/255,a=parseInt(l.substr(3,2),16)/255;e={r:o,g:a,b:parseInt(l.substr(5,2),16)/255,a:parseInt(l.substr(7,2),16)/255}}else{const o=parseInt(l.substr(1,2),16)/255;e={r:o,g:parseInt(l.substr(3,2),16)/255,b:parseInt(l.substr(5,2),16)/255,a:1}}m.setValueForMode(u,e),console.log(`Successfully updated ${g} in ${o} for mode ${t}`),figma.ui.postMessage({type:"design-token-updated",variable:s,value:e,success:!0})}}catch(e){console.error("Error updating design token:",e);const o=e instanceof Error?e.toString():"An unknown error occurred";figma.ui.postMessage({type:"design-token-updated",variable:d.variable,success:!1,error:o})}}));break;case"check-font-availability-api":e(void 0,void 0,void 0,(function*(){try{const e=d.fontName;console.log(`Checking font availability for: ${e}`);const o=(yield figma.listAvailableFontsAsync()).some((o=>o.fontName.family.toLowerCase().includes(e.toLowerCase())||e.toLowerCase().includes(o.fontName.family.toLowerCase())));console.log(`Font "${e}" availability: ${o}`),figma.ui.postMessage({type:"font-availability-result",fontName:e,available:o})}catch(e){console.error(`Error checking font availability: ${e}`),figma.ui.postMessage({type:"font-availability-result",fontName:d.fontName,available:!0})}}));break;case"insert-image":{const e=figma.currentPage.findOne((e=>"FRAME"===e.type&&e.name===d.frameName));if(e){e.findChildren((e=>"RECTANGLE"===e.type)).forEach((e=>e.remove()));const o=figma.createImage(d.imageBytes),a=figma.createRectangle();a.resize(e.width,e.height),a.fills=[{type:"IMAGE",imageHash:o.hash,scaleMode:"FILL"}],e.appendChild(a)}break}case"update-button-shape":console.log("Updating button shape to:",d.shape),n(d.variables);break;case"copy-all-mode-variables":l(d.collection,d.fromMode,d.toMode);break;case"update-navbar-background":console.log("Received update-navbar-background message:",d);try{const{navId:e,backgroundName:o,isDefaultSurfaceDim:a}=d,n=figma.variables.getLocalVariableCollections();console.log("Available collections:",n.map((e=>e.name))),console.log(`Request to update ${e} to background ${o}`),console.log(`isDefaultSurfaceDim: ${a}`),figma.notify(`Received request to update ${e} to ${o}`)}catch(e){console.error("Error in update-navbar-background handler:",e)}break;case"debug-variable-update-log":{const{operation:e,target:o,result:a,details:n}=d;console.group(`🧪 DEBUG: ${e} on ${o}`),console.log("Result:",a),n&&console.log("Details:",n),console.groupEnd(),figma.notify(`${e}: ${a?"✅":"❌"} ${(null==n?void 0:n.slice(0,30))||""}`);break}case"PLUGIN_UI_READY":console.log("🔍 Plugin UI is ready");break;case"copy-token-value":try{const{collection:e,group:o,fromMode:a,toMode:n,variable:t}=d,i=r(e),s=null===(f=i.modes.find((e=>e.name===a)))||void 0===f?void 0:f.modeId,l=null===(g=i.modes.find((e=>e.name===n)))||void 0===g?void 0:g.modeId;if(!s||!l)return void console.error(`Mode not found: From ${a}, To ${n}`);const c=o?`${o}/${t}`:t,u=figma.variables.getLocalVariables().find((e=>e.name===c&&e.variableCollectionId===i.id));if(!u)return void console.error(`Variable ${c} not found`);const m=u.valuesByMode[s];u.setValueForMode(l,m)}catch(e){console.error("Error copying token value:",e)}break;case"update-statusbar-links":c(d.statusId,d.collection,d.mode,d.targetCollection,d.targetGroup,d.activeMode);break;case"link-variable":{console.log("Link variable request received:",d);const{sourceCollection:e,sourceMode:o,sourceVariable:a,targetCollection:n,targetMode:t,targetVariable:r}=d;figma.notify(`Link request: ${o}/${a} → ${t}/${r}`);break}case"bulk-update-navbar-links":console.log("Processing bulk navbar/statusbar updates:",d),d.navbarUpdates&&Array.isArray(d.navbarUpdates)&&d.navbarUpdates.forEach((e=>{s(e.navId,e.collection,e.mode,e.targetCollection,e.targetGroup,e.activeMode)})),d.statusbarUpdates&&Array.isArray(d.statusbarUpdates)&&d.statusbarUpdates.forEach((e=>{c(e.statusId,e.collection,e.mode,e.targetCollection,e.targetGroup,e.activeMode)}))}},console.log("🔍 Plugin successfully connected to Figma"),figma.ui.postMessage({type:"ui-ready",fontDatabase:{}})}catch(d){const u=d instanceof Error?d.toString():"An unknown error occurred";console.error("An error occurred:",u)}console.log("PLUGIN FINISHED")}})[409]()})();